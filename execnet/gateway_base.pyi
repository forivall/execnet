import sys
from typing import TYPE_CHECKING, Any, BinaryIO, Callable, Literal, Optional, IO

from .gateway import Gateway

sysex: tuple[type[KeyboardInterrupt], type[SystemExit]];

class Channel(object):
  gateway: Gateway
  id: str

  def __init__(self, gateway: Gateway, id: str): ...
  def setcallback(self, callback: Callable[[Any], None], endmarker: Optional[Any]) -> None: ...
  def isclosed(self) -> bool: ...
  def makefile(self, mode: Literal['r', 'w']="w", proxyclose=False) -> IO: ...
  def close(self, error=None) -> None: ...
  def waitclose(self, timeout=None) -> None: ...
  def send(self, item: Any) -> None: ...
  def receive(self, timeout=None) -> Any: ...
  def reconfigure(self, py2str_as_py3str=True, py3str_as_py2str=False) -> None: ...

class ChannelFactory(object):
  gateway: Gateway
  startcount: int
  finished: bool
  def __init__(self, gateway: Gateway, startcount: int=1): ...
  def new(self, id=None) -> Channel: ...
  def channels(self) -> list[Channel]: ...

class BaseGateway(object):
  exc_info = sys.exc_info
  _sysex = sysex
  id: str

  def __init__(self, io, id, _startcount=2): ...
  def newchannel(self) -> Channel: ...
  def join(self, timeout=None) -> None: ...

def dump(byteio: BinaryIO, obj: Any) -> None: ...
def dumps(obj: Any) -> bytes: ...
def load(io: BinaryIO, py2str_as_py3str=False, py3str_as_py2str=False) -> None: ...
def loads(bytestring: bytes, py2str_as_py3str=False, py3str_as_py2str=False) -> Any: ...

class RemoteError(Exception):
  def warn() -> None: ...
class TimeoutError(IOError): ...
class DataFormatError(Exception): ...

if TYPE_CHECKING:
  Backend = Literal['thread', 'eventlet', 'gevent']
  class ExecModel:
    backend: Backend
    def __init__(self, name: str): ...
def get_execmodel(backend: Backend | ExecModel) -> ExecModel: ...
